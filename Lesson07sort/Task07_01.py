"""1. Отсортируйте по убыванию методом пузырька одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком.
Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут."""
import random
size = 20
array = [random.randint(-100,100) for i in range(size)]
print(f'исходный массив\n{array}')
# вводим булевую переменную not_in_order
# если сделан полный проход в массиве и не сделано ни одной перестановки, то массив можно считать отсортированным.
# те все пары соседних чисел расположены в правильном порядке, поэтому их не нужно менять местами.
# скорость зависит от исходных данных, в лучшем случае алгоритм отработает быстрее обычного пузырька

def bubble_sort_improved(array):
    j = len(array) - 1
    not_in_order = True   # Устанавливаем True, чтобы цикл запустился хотя бы один раз
    while not_in_order:
        not_in_order = False
        for i in range(j):
            if array[i] < array[i + 1]:                     # по убыванию
                array[i], array[i + 1] = array[i + 1], array[i]
                not_in_order = True   # Устанавливаем True для следующей итерации
        j -= 1     # если обмена не было, то not_in_order равен False и выходим из цикла
    return array

bubble_sort_improved(array)   #проверка
print(f'отсортированный массив\n{array}')